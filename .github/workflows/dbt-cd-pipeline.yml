name: dbt-cd-pipeline

on:
  push:
    branches:
      - main

env:
  DBT_PROFILES_DIR: "."
  DBT_PROFILE: "jaffle_shop_demo"
  DBT_TARGET: "prod"
  DBT_HOST: ${{ secrets.DBT_HOST }}
  DBT_HTTP_PATH: ${{ secrets.DBT_HTTP_PATH }}
  DBT_TOKEN: ${{ secrets.DBT_TOKEN }}
  PYTHON_VERSION: "3.10"
  EMOJI_ROCKET: "\U0001F680"
  EMOJI_BAR_CHART: "\U0001F4CA"
  EMOJI_CHECK_MARK: "\u2705"
  EMOJI_CROSS_MARK: "\u274C"
  EMOJI_PAPERCLIP: "\U0001F4CE"

jobs:
  deploy-to-prod:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    outputs:
      start_time: ${{ steps.start_time.outputs.start_time }}
      start_time_readable: ${{ steps.start_time.outputs.start_time_readable }}
      duration: ${{ steps.duration.outputs.duration }}

    steps:
      - name: Record start time
        id: start_time
        run: |
          echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT
          echo "start_time_readable=$(date -u '+%H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: "dbt-requirements.txt"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r dbt-requirements.txt

      - name: Install dbt packages
        run: dbt deps

      - name: Download prod manifest
        uses: Legit-Labs/action-download-artifact@v2
        with:
          name: dbt-manifest-prod
          path: prod-artifacts
          workflow: dbt-cd-pipeline.yml
          workflow_conclusion: success
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run dbt build
        run: |
          set -o pipefail

          echo "## dbt Build Results" > dbt_results.md
          echo "" >> dbt_results.md

          DBT_FAILED=0

          if [ -d "prod-artifacts" ]; then
            echo "Found production artifacts. Running modified models only."
            if dbt build --select state:modified+ --defer --state prod-artifacts 2>&1 | tee dbt_output.txt; then
              echo "$EMOJI_CHECK_MARK dbt build completed successfully" >> dbt_results.md
            else
              echo "$EMOJI_CROSS_MARK dbt build failed" >> dbt_results.md
              DBT_FAILED=1
            fi
          else
            echo "No production artifacts found. Running a full build."
            if dbt build 2>&1 | tee dbt_output.txt; then
              echo "$EMOJI_CHECK_MARK dbt build completed successfully" >> dbt_results.md
            else
              echo "$EMOJI_CROSS_MARK dbt build failed" >> dbt_results.md
              DBT_FAILED=1
            fi
          fi

          echo "" >> dbt_results.md
          echo "### dbt Output:" >> dbt_results.md
          echo '```' >> dbt_results.md
          cat dbt_output.txt >> dbt_results.md
          echo '```' >> dbt_results.md

          if [ $DBT_FAILED -eq 1 ]; then
            echo ""
            echo "dbt build failed! Please check the logs for details."
            exit 1
          fi

      - name: Upload dbt manifest
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: dbt-manifest-prod
          path: target/manifest.json
          retention-days: 7

      - name: Upload dbt results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dbt-results
          path: dbt_results.md
          retention-days: 7

      - name: Record end time and calculate duration
        id: duration
        if: always()
        run: |
          end_time=$(date +%s)
          start_time=${{ steps.start_time.outputs.start_time }}
          duration=$((end_time - start_time))
          minutes=$((duration / 60))
          seconds=$((duration % 60))
          echo "duration=${minutes}m ${seconds}s" >> $GITHUB_OUTPUT

  summary:
    runs-on: ubuntu-latest
    needs: [deploy-to-prod]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Generate comprehensive summary
        run: |
          echo "# $EMOJI_ROCKET dbt CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## $EMOJI_BAR_CHART Job Status Overview" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Started | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|---------|----------|" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.deploy-to-prod.result }}" = "success" ]; then
            echo "| Deploy to Prod | $EMOJI_CHECK_MARK Success | ${{ needs.deploy-to-prod.outputs.start_time_readable || 'N/A' }} | ${{ needs.deploy-to-prod.outputs.duration || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Deploy to Prod | $EMOJI_CROSS_MARK Failed | ${{ needs.deploy-to-prod.outputs.start_time_readable || 'N/A' }} | ${{ needs.deploy-to-prod.outputs.duration || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f "./artifacts/dbt-results/dbt_results.md" ]; then
            echo "## $EMOJI_ROCKET dbt Build Details" >> $GITHUB_STEP_SUMMARY
            cat ./artifacts/dbt-results/dbt_results.md >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          echo "## $EMOJI_PAPERCLIP Available Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "The following artifacts are available for download:" >> $GITHUB_STEP_SUMMARY
          echo "- **dbt Results**: dbt build and test logs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.deploy-to-prod.result }}" == "failure" ]]; then
            echo "## $EMOJI_CROSS_MARK Pipeline Status: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "One or more checks failed. Please review the details above and fix the issues." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "## $EMOJI_CHECK_MARK Pipeline Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "All checks passed successfully! $EMOJI_PARTY_POPPER" >> $GITHUB_STEP_SUMMARY
          fi
